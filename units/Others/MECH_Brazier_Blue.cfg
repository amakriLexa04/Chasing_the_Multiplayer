#textdomain wesnoth-ctl

[unit_type]
    id=Brazier
    name= _ "Brazier"
    race=mechanical
	unhealable=yes
    image="items/brazier.png~BLIT(items/brazier-lit1.png~CS(-130,20,170)~CROP(0,0,72,39),0,0)"
	hitpoints=50
    movement_type=none
	attacks=0
    level=1
    alignment=neutral
    usage=none
	#po: Цей магічний світильник, що осяює все навколо себе утіленням самого Світла, було на якийсь час закликано до цього світу буквально з нічого потужною магією Даеоли. Хоч це й магічна істота, вона є повністю матеріальною, тому вона здатна як і завдавати шкоди ворогам, так і отримувати її у відповідь. 
    description= _"This magical brazier, which illuminates everything around it with the embodiment of Light itself, was summoned to this world for a time by the powerful magic of Daeola. Although it is a magical being, it is completely material, so it is capable of both inflicting harm on its enemies and receiving it in return."
    die_sound=wail.wav
	[abilities]
        {ABILITY_ILLUMINATES HALO="halo/illuminates-aura.png"}
	    [scorch]
            id=scorch
            name= _ "scorch"
            description= _ "At the start of this unit's turn, it deals 10 arcane damage to all adjacent enemy units."
        
            [dummy_ability]
            [/dummy_ability]
        [/scorch]
    [/abilities]
	
	[event]
	name=new turn
	first_time_only=no
	
	[store_unit]
        [filter]
			ability=scorch
        [/filter]
        variable=scorch_ability_units
    [/store_unit]
	
	{FOREACH scorch_ability_units i}
	{VARIABLE scorch_ability_unit $scorch_ability_units[$i].id}
	
	[scroll_to_unit]
	id=$scorch_ability_unit
	[/scroll_to_unit]
	
	[lua]
        code=<<
            local attacker = wesnoth.units.find_on_map({ id=wml.variables["scorch_ability_unit"] })[1]
			local defenders = wesnoth.units.find_on_map({ 
                wml.tag.filter_adjacent{ id=attacker.id },
                wml.tag.filter_side{ wml.tag.enemy_of{ side=attacker.side } },
				race = "undead",
				wml.tag["not"]{ id= "lenvan" }
            })
            
            -- animate and deal damage
            local animator = wesnoth.units.create_animator()
            for i,defender in ipairs(defenders) do
                local damage = math.floor( 20 * ( 100 - defender:resistance_against("arcane", false, defender.x, defender.y) )/100 )
                defender.facing = wesnoth.map.get_relative_dir(defender.x, defender.y, attacker.x, attacker.y)
                animator:add(  defender, "defend", "hit", { with_bars=true, text=tostring(damage), color={255,0,0} }  )
                defender.hitpoints = defender.hitpoints - damage
            end
			animator:add(  attacker, "defend", "hit", { with_bars=true, text=tostring(10), color={255,0,0} }  )
			attacker.hitpoints = attacker.hitpoints - 10
            animator:run()
            animator:clear()
            
            -- animate death
            local animator = wesnoth.units.create_animator()
            for i,defender in ipairs(defenders) do if (defender.hitpoints<=0) then
                animator:add(  defender, "death", "hit", {}  )
            end end
            animator:run()
            animator:clear()
            
            -- kill units
            for i,defender in ipairs(defenders) do if (defender.hitpoints<=0) then
                wesnoth.game_events.fire("die", defender.loc, attacker.loc)
                wesnoth.units.erase(defender)
            end end
			
			if (attacker.hitpoints<=0) then
                wesnoth.game_events.fire("die", attacker.loc, attacker.loc)
                wesnoth.units.erase(attacker)
            end
        >>
    [/lua]
	
	[redraw][/redraw]
	
	[modify_unit]
	    [filter]
	    x,y=$scorch_ability_units[$i].x,$scorch_ability_units[$i].y
	    [/filter]
	    resting=no
	[/modify_unit]
	
	#[harm_unit]
	#	[filter]
	#	x,y=$scorch_ability_units[$i].x,$scorch_ability_units[$i].y
	#	[/filter]
	#    amount=10
	#	kill=yes
	#	animate=yes
	#[/harm_unit]
	
	{NEXT i}
	{CLEAR_VARIABLE scorch_ability_units}
	[/event]
	
    # It should just sit there, but default behaviour kicks in and hflips,
    # so we make the base frame a blank
    [standing_anim]
        start_time=-50
        [frame]
            image="misc/blank-hex.png:50"
        [/frame]
	    [egg_frame]
            image="items/brazier.png~BLIT(items/brazier-lit[1~8].png~CS(-130,20,170)~CROP(0,0,72,39),0,0):150"
            auto_vflip=no
            auto_hflip=no
			layer=5
            base=90,144
            center=90,144
		[/egg_frame]
    [/standing_anim]
    [defend]
        start_time=-50
        [frame]
            image="misc/blank-hex.png:50"
        [/frame]
        [egg_frame]
            image="items/brazier.png~BLIT(items/brazier-lit[1~8].png~CS(-130,20,170)~CROP(0,0,72,39),0,0):150"
            auto_vflip=no
            auto_hflip=no
			layer=5
            base=90,144
            center=90,144
		[/egg_frame]
    [/defend]
    [death]
        start_time=-150
        egg_alpha=1~0:600
        [frame]
            image="misc/blank-hex.png:600"
        [/frame]
        [egg_frame]
            image="items/brazier.png:600"
            auto_vflip=no
            auto_hflip=no
			layer=5
            base=90,144
            center=90,144
        [/egg_frame]
    [/death]
    
    [resistance]
        blade=100
        pierce=80
        impact=120
        fire=80
        cold=80
        arcane=120
    [/resistance]
	
#	[event]
#	name=side 1 turn refresh
#	first_time_only=no
#	
#	[store_unit]
#        [filter]
#            type=Brazier
#        [/filter]
#        variable=brazier_var
#    [/store_unit]
#
#    {FOREACH brazier_var i}
#
#	    [harm_unit]
#		[filter]
#		id=$brazier_var[$i].id
#		[/filter]
#	    amount=10
#		kill=no
#	    [/harm_unit]
#		
#		[modify_unit]
#		[filter]
#		type=Brazier
#		[/filter]
#		resting=no
#		[status]
#		unhealable=yes
#		[/status]
#		attacks_left=0
#		[/modify_unit]
#		
#		[set_variable]
#		name=brazier_var_hp
#		value="$($brazier_var[$i].hitpoints - 8)"
#		[/set_variable]
#		
#		[if]
#		[variable]
#		name=brazier_var_hp
#		less_than_equal_to=1
#		[/variable]
#		[then]
#		[kill]
#		id=$brazier_var[$i].id
#		animate=yes
#		[/kill]
#		[/then][/if]
#
#    {NEXT i}
#
#    {CLEAR_VARIABLE brazier_var_hp}
#    {CLEAR_VARIABLE brazier_var}
#	
#	[/event]
[/unit_type]
