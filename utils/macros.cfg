#textdomain wesnoth-ctl

# "C" stands for "conditional"
#define GENERIC_UNITC SIDE TYPE X Y WML
    {VARIABLE generic_unitc {TYPE}}
    [if] {VARIABLE_CONDITIONAL generic_unitc not_equals "none"}
        {THEN(  {GENERIC_UNIT {SIDE} {TYPE} {X} {Y}} {WML}  )}
    [/if]
    {CLEAR_VARIABLE generic_unitc}
#enddef
#define NAMED_UNITC SIDE TYPE X Y ID NAME WML
    {VARIABLE named_unitc {TYPE}}
    [if] {VARIABLE_CONDITIONAL named_unitc not_equals "none"}
        {THEN( {NAMED_UNIT {SIDE} {TYPE} {X} {Y} {ID} {NAME} ()} {WML} )}
    [/if]
    {CLEAR_VARIABLE named_unitc}
#enddef

#define FIRE_EVENT NAME
    #
    [fire_event]
        name={NAME}
    [/fire_event]
#enddef

#define VALUE WML
    #
    [value]
        {WML}
    [/value]
#enddef

#define ANIMATE
    [+unit]
        animate=yes
    [/unit]
#enddef

#define SOUND FILE
    #
    [sound]
        name={FILE}
    [/sound]
#enddef

#define DELAY TIME
    [delay]
        time={TIME}
    [/delay]
#enddef

#define SCREEN_FADER RGB ALPHA DURATION
    [screen_fade]
        red,green,blue={RGB}
        alpha={ALPHA}
        duration={DURATION}
    [/screen_fade]
#enddef

#define MODIFY_TERRAIN_DELAY MS TERRAIN X Y
    {DELAY {MS}}
    {MODIFY_TERRAIN {TERRAIN} {X} {Y}}
    [redraw]
    [/redraw]
#enddef

#define REMOVE_OBJECT OBJECT_ID FILTER_WML
    #
    [remove_object]
        object_id={OBJECT_ID}
        {FILTER_WML}
    [/remove_object]
#enddef
#define GIVE_OBJECT_TO FLT WML
    #
    [modify_unit]
        {FILTER {FLT}}
        [object]
            {WML}
        [/object]
    [/modify_unit]
    #
#enddef
#define EFFECT APPLY_TO WML
    #
    [effect]
        apply_to={APPLY_TO}
        {WML}
    [/effect]
    #
#enddef

# primitive macros for fading music. Only supports durations in increments of 100ms, and doesn't work with 0 durations
#define FADE_MUSIC_IN DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 100}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            {VARIABLE volume "$(100-$volume)"}
            [volume]
                music=$volume
            [/volume]
            {DELAY 100}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    #
#enddef
#define FADE_MUSIC_OUT DURATION
    #
    {VARIABLE fade_duration_remaining {DURATION}}
    [while] {VARIABLE_CONDITIONAL fade_duration_remaining greater_than 0}
        [do]
            {VARIABLE_OP fade_duration_remaining sub 100}
            {VARIABLE volume 100}
            {VARIABLE_OP volume multiply $fade_duration_remaining}
            {VARIABLE_OP volume divide {DURATION}}
            [volume]
                music=$volume
            [/volume]
            {DELAY 100}
        [/do]
    [/while]
    {CLEAR_VARIABLE fade_duration_remaining,volume}
    #
#enddef

#define VARIABLES_SPLIT NAME KEY SEPARATOR LIST
    #
    [set_variables]
        name={NAME}
        [split]
            key={KEY}
            separator={SEPARATOR}
            list={LIST}
        [/split]
    [/set_variables]
    #
#enddef

#define KILL FILTER
#arg ANIMATE
no#endarg
#arg FIRE_EVENT
no#endarg
    [kill]
        {FILTER}
        animate={ANIMATE}
        fire_event={FIRE_EVENT}
    [/kill]
#enddef

# copied (with modifications) from https://wiki.wesnoth.org/WML_Utilities
#define FIND_NEARBY FILTER X Y LIMIT
    # Does a search for a nearby unit that matches the given filter.
    # Basically just looks for such a unit with increasing radius until it finds at least one
    [clear_variable]
        name=found_unit
    [/clear_variable]
    [set_variable]
        name=search_radius
        value=0
    [/set_variable]
    [while]
        [not]
            [variable]
                name=found_unit.length
                greater_than=0
            [/variable]
        [/not]
        [and]
            [variable]
                name=search_radius
                less_than_equal_to={LIMIT}
            [/variable]
        [/and]
        [do]
            #             {DEBUG "Searching depth $search_radius around ({X}, {Y})..."}
            [store_unit]
                variable=found_unit
                [filter]
                    {FILTER}
                    [filter_location]
                        x,y={X},{Y}
                        radius=$search_radius
                    [/filter_location]
                [/filter]
            [/store_unit]
            #             {DEBUG "...found $found_unit.length units."}
            [set_variable]
                name=search_radius
                add=1
            [/set_variable]
        [/do]
    [/while]
#enddef

#define SPAWN_IF_UNFOUND SIDE TYPE X Y
    [set_variable]
        name=randx
        rand={X}
    [/set_variable]
    [set_variable]
        name=randy
        rand={Y}
    [/set_variable]

    {IF_UNFOUND}
    [then]
        {NAMED_UNIT {SIDE} ({TYPE}) $randx $randy spawned () ()} {ANIMATE}
        [store_unit]
            variable=found_unit
            [filter]
                id=spawned
            [/filter]
        [/store_unit]
    [/then]
    {ENDIF}

    {CLEAR_VARIABLE randx}
    {CLEAR_VARIABLE randy}
#enddef

#define CLEANUP_SEARCH
    # Clears variables involved in searching (the FIND_NEARBY macro). Put this
    # in your name=victory,defeat tag to clean up if you use FIND_NEARBY within
    # a scenario.
    [clear_variable]
        name=found_unit, search_radius
    [/clear_variable]
#enddef

#define IMMOBILE
    [+unit]
        max_moves=0
    [/unit]
#enddef
#define PASSABLE
    [+unit]
        passable=yes
    [/unit]
#enddef

#define MOVES MAX_MOVES
    [+unit]
        max_moves={MAX_MOVES}
    [/unit]
#enddef

#define HITPOINTS HP
    [+unit]
        hitpoints={HP}
    [/unit]
#enddef

#define EXPERIENCE XP
    [+unit]
        experience={XP}
    [/unit]
#enddef

#define STATUS WML
    [+unit]
        [status]
            {WML}
        [/status]
    [/unit]
#enddef

#define GENDER GND
    [+unit]
        gender={GND}
    [/unit]
#enddef

#define NAME UNITNAME
    [+unit]
        name={UNITNAME}
    [/unit]
#enddef

#define ROLE ROLENAME
    [+unit]
        role={ROLENAME}
    [/unit]
#enddef

#define MODIFICATIONS WML
    #
    [modifications]
        {WML}
    [/modifications]
#enddef

#define ADD_MODIFICATION WML
    [+unit]
        [modifications]
            {WML}
        [/modifications]
    [/unit]
#enddef

#define MOVE_STORED_UNIT VAR MOVEX MOVEY
    [set_variable]
        name={VAR}.x
        add={MOVEX}
    [/set_variable]
    [set_variable]
        name={VAR}.y
        add={MOVEY}
    [/set_variable]
#enddef

#define GOLD_PICKUP X Y IMAGE AMOUNT LABEL MESSAGE
    {PLACE_IMAGE {IMAGE} {X} {Y}}
    {SET_LABEL {X} {Y} {LABEL}}
    [event]
        name=moveto {FILTER side,x,y=1,{X},{Y}}
        id=gold_pickup_{X}_{Y} # so we can remove this
        {SAY_IF_NOT_SUMMON unit {MESSAGE}}
        {SOUND gold.ogg}
        [gold]
            side,amount=1,{AMOUNT}
        [/gold]
        {REMOVE_IMAGE $unit.x $unit.y}
        {REMOVE_LABEL {X} {Y}}
    [/event]
#enddef

#define STORE_SELECTED_UNITS STORE_VARIABLE ID KILL
    [store_unit]
        kill={KILL}
        mode=append
        variable={STORE_VARIABLE}
        [filter]
            id={ID}
        [/filter]
    [/store_unit]
#enddef

#define UNSTORE_SELECTED_UNITS STORE_VARIABLE
    [foreach]
        array={STORE_VARIABLE}
        [do]
            [unstore_unit]
                variable=this_item
                find_vacant=yes
                x=recall
                y=recall
            [/unstore_unit]
            {FULL_HEAL id=$this_item.id}
        [/do]
    [/foreach]

    {CLEAR_VARIABLE {STORE_VARIABLE}}
#enddef