#textdomain wesnoth-ctl

##base for adjacent spells
[lua]
    code= <<
	
	function spell_place_image(x, y, image)
        wesnoth.wml_actions.item({
            x = x,
            y = y,
            image = image
        })
    end

    function spell_remove_image(image)
        wesnoth.wml_actions.remove_item({
            image = image
        })
    end
	
    function adjacent_spell(caster_id, radius, image, ignore_units, event_spell, gold_cancel, xp_cancel)
    local unit_id = caster_id
    local selected_target_hexes = {}

    wesnoth.interface.allow_end_turn(false)

    wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = "disabled"

    local unit_to_modify = (wesnoth.units.find_on_map({id = unit_id})) [1]

    local unit_to_modify_attacks = unit_to_modify.attacks_left
    local unit_to_modify_moves = unit_to_modify.moves
    local unit_to_modify_x = unit_to_modify.x
    local unit_to_modify_y = unit_to_modify.y

    unit_to_modify.attacks_left = 0
    unit_to_modify.moves = 0

    for xx = unit_to_modify_x - radius, unit_to_modify_x + radius do
        for yy = unit_to_modify_y - radius, unit_to_modify_y + radius do
            if wesnoth.map.distance_between(unit_to_modify_x, unit_to_modify_y, xx, yy) <= radius then
                local target_units = (wesnoth.units.find_on_map({ x = xx, y = yy }))
                local has_unit = #target_units > 0
                if (not ignore_units or not has_unit) and (xx ~= unit_to_modify_x or yy ~= unit_to_modify_y) then
                    spell_place_image(xx, yy, image)
                    table.insert(selected_target_hexes, { x = xx, y = yy })
                end
            end
        end
    end
	
	
	function on_click_spell_event_adjacent(Table)
        for _, target_hex in ipairs(selected_target_hexes) do
            if Table.x == target_hex.x and Table.y == target_hex.y then
                wml.variables["unit_to_cast_on_x"] = Table.x
				wml.variables["unit_to_cast_on_y"] = Table.y
                --wesnoth.interface.add_chat_message("Info", "Cast spell!")
                spell_remove_image(image)
                wml.fire("redraw")
                wesnoth.game_events.on_mouse_button = nil

                wml.variables["distance_between_units"] = (wesnoth.map.distance_between(unit_to_modify_x, unit_to_modify_y, Table.x, Table.y) * 72)

                wesnoth.game_events.fire(event_spell)

                unit_to_modify.attacks_left = unit_to_modify_attacks
                unit_to_modify.moves = unit_to_modify_moves - 1

				wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = nil

                wesnoth.interface.allow_end_turn(true)

                wesnoth.units.select()
                return
            end
        end
        --wesnoth.interface.add_chat_message("Info", "Cancel spell!")
        spell_remove_image(image)
        wml.fire("redraw")
        wesnoth.game_events.on_mouse_button = nil

        unit_to_modify.attacks_left = unit_to_modify_attacks
        unit_to_modify.moves = unit_to_modify_moves
        unit_to_modify.experience = unit_to_modify.experience + xp_cancel
		wesnoth.sides[unit_to_modify.side].gold =wesnoth.sides[unit_to_modify.side].gold  + gold_cancel

		wml.variables["caster_" .. caster_id .. ".spellcasted_this_turn"] = nil
		wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = nil

        wesnoth.interface.allow_end_turn(true)

        wesnoth.units.select()
    end

    wesnoth.game_events.on_mouse_button = function(screen_x, screen_y, button, pressed)
        if pressed and button == "left" then
            --on_click_event(screen_x, screen_y)
			wesnoth.sync.invoke_command("on_click_spell_event", {type="_adjacent", x=screen_x, y=screen_y})
        end
    end
end
    
    >>
[/lua]

#define CTL_ADJACENT_SPELL caster_id radius image ignore_units event_spell gold_cancel xp_cancel

    {VARIABLE adjacent_spell_radius {radius}}
    {VARIABLE adjacent_spell_caster_id {caster_id}}
    {VARIABLE adjacent_spell_image {image}}
    {VARIABLE adjacent_spell_ignore_units {ignore_units}}
    {VARIABLE adjacent_spell_event_spell {event_spell}}
    {VARIABLE adjacent_gold_cancel {gold_cancel}}
    {VARIABLE adjacent_xp_cancel {xp_cancel}}

    [lua]
            code= <<
		    adjacent_spell(wml.variables["adjacent_spell_caster_id"],
			wml.variables["adjacent_spell_radius"],
			wml.variables["adjacent_spell_image"],
			wml.variables["adjacent_spell_ignore_units"],
			wml.variables["adjacent_spell_event_spell"],
			wml.variables["adjacent_gold_cancel"],
			wml.variables["adjacent_xp_cancel"])

            wesnoth.interface.delay(300)
            wesnoth.units.select()
	        wesnoth.interface.deselect_hex()
            wml.fire("redraw")
		>>
    [/lua]
	
	{CLEAR_VARIABLE adjacent_spell_radius}
	{CLEAR_VARIABLE adjacent_spell_caster_id}
    {CLEAR_VARIABLE adjacent_spell_image}
    {CLEAR_VARIABLE adjacent_spell_ignore_units}
    {CLEAR_VARIABLE adjacent_spell_event_spell}
    {CLEAR_VARIABLE adjacent_gold_cancel}
    {CLEAR_VARIABLE adjacent_xp_cancel}

#enddef



[lua]
    code= <<
	
    function ranged_spell(caster_id, radius, image, allied_only, ignore_caster, event_spell, gold_cancel, experience_cancel)
    local unit_id = caster_id
    local selected_target_units = {}
	
	wesnoth.interface.allow_end_turn(false)
	
	wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = "disabled"

    local unit_to_modify = (wesnoth.units.find_on_map({id = unit_id})) [1]

    local unit_to_modify_attacks = unit_to_modify.attacks_left
    local unit_to_modify_moves = unit_to_modify.moves
	wml.variables["unit_to_modify_x"] = unit_to_modify.x
	wml.variables["unit_to_modify_y"] = unit_to_modify.y

    unit_to_modify.attacks_left = 0
    unit_to_modify.moves = 0

    local function is_allied(unit, side)
        return wesnoth.sides[unit.side].team_name == wesnoth.sides[side].team_name
    end

    local x, y = unit_to_modify.x, unit_to_modify.y
    for xx = x - radius, x + radius do
        for yy = y - radius, y + radius do
            if wesnoth.map.distance_between(x, y, xx, yy) <= radius then
                local target_units = wesnoth.units.find_on_map({ x = xx, y = yy })
                if #target_units > 0 then
                    local target_unit = target_units[1]
                    if (allied_only == "all" or (allied_only == true and is_allied(target_unit, unit_to_modify.side)) or (allied_only == false and not is_allied(target_unit, unit_to_modify.side))) and (not ignore_caster or target_unit.id ~= unit_id) then
                        spell_place_image(xx, yy, image)
                        table.insert(selected_target_units, {x = xx, y = yy})
                    end
                end
            end
        end
    end

    function on_click_spell_event_ranged(Table)
        for _, target_unit in ipairs(selected_target_units) do
            if (Table.x == target_unit.x and Table.y == target_unit.y) then
				wml.variables["unit_to_cast_on_x"] = Table.x
				wml.variables["unit_to_cast_on_y"] = Table.y
                --wesnoth.interface.add_chat_message("Info", "Cast spell!")
                spell_remove_image(image)
                wml.fire("redraw")
                wesnoth.game_events.on_mouse_button = nil
				
				wml.variables["distance_between_units"] = (wesnoth.map.distance_between(unit_to_modify.x, unit_to_modify.y, Table.x, Table.y)*72)
				
                wesnoth.game_events.fire(event_spell)
				
				unit_to_modify.attacks_left = unit_to_modify_attacks
                unit_to_modify.moves = unit_to_modify_moves - 1
				
				wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = nil
				
                wml.variables["unit_to_modify_attacks"] = nil
			    wml.variables["unit_to_modify_moves"] = nil
				
				wesnoth.interface.allow_end_turn(true)

				wesnoth.units.select()
                return
            end
        end
        --wesnoth.interface.add_chat_message("Info", "Cancel spell!")
        spell_remove_image(image)
        wml.fire("redraw")
        wesnoth.game_events.on_mouse_button = nil
		
		unit_to_modify.attacks_left = unit_to_modify_attacks
        unit_to_modify.moves = unit_to_modify_moves
		unit_to_modify.experience = unit_to_modify.experience + experience_cancel
		wesnoth.sides[unit_to_modify.side].gold =wesnoth.sides[unit_to_modify.side].gold  + gold_cancel

		wml.variables["caster_" .. caster_id .. ".spellcasted_this_turn"] = nil
		wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = nil
		
        wml.variables["unit_to_modify_attacks"] = nil
		wml.variables["unit_to_modify_moves"] = nil
		
		wesnoth.interface.allow_end_turn(true)

        wesnoth.units.select()
    end

    wesnoth.game_events.on_mouse_button = function(screen_x, screen_y, button, pressed)
    if (pressed and button == "left") then
        --on_click_event(screen_x, screen_y)
		wesnoth.sync.invoke_command("on_click_spell_event", {type="_ranged", x=screen_x, y=screen_y})
    end
end
end
    
    >>
[/lua]

#define CTL_RANGED_SPELL caster_id radius image allied_only ignore_caster event_spell gold_cancel xp_cancel

    {VARIABLE ranged_spell_caster_id {caster_id}}
    {VARIABLE ranged_spell_radius {radius}}
    {VARIABLE ranged_spell_image {image}}
	{VARIABLE ranged_spell_allied_only {allied_only}}
    {VARIABLE ranged_spell_ignore_caster {ignore_caster}}
    {VARIABLE ranged_spell_event_spell {event_spell}}
    {VARIABLE ranged_gold_cancel {gold_cancel}}
    {VARIABLE ranged_xp_cancel {xp_cancel}}

    [lua]
            code= <<
		    ranged_spell(wml.variables["ranged_spell_caster_id"],
			wml.variables["ranged_spell_radius"],
			wml.variables["ranged_spell_image"],
			wml.variables["ranged_spell_allied_only"],
			wml.variables["ranged_spell_ignore_caster"],
			wml.variables["ranged_spell_event_spell"],
			wml.variables["ranged_gold_cancel"],
			wml.variables["ranged_xp_cancel"])

            wesnoth.interface.delay(300)
            wesnoth.units.select()
	        wesnoth.interface.deselect_hex()
            wml.fire("redraw")
		>>
    [/lua]
	
	{CLEAR_VARIABLE ranged_spell_radius}
	{CLEAR_VARIABLE ranged_spell_caster_id}
    {CLEAR_VARIABLE ranged_spell_image}
	{CLEAR_VARIABLE ranged_spell_allied_only}
    {CLEAR_VARIABLE ranged_spell_ignore_caster}
    {CLEAR_VARIABLE ranged_spell_event_spell}
    {CLEAR_VARIABLE ranged_gold_cancel}
    {CLEAR_VARIABLE ranged_xp_cancel}

#enddef


##base for rose spells
##base for adjacent spells
[lua]
    code= <<

    function rose_spell(caster_id, radius, image, ignore_units, event_spell, gold_cancel, xp_cancel)
        local unit_id = caster_id
        local selected_target_hexes = {}
		local selected_target_hexes_n = {}
		local selected_target_hexes_ne = {}
		local selected_target_hexes_nw = {}
		local selected_target_hexes_s = {}
		local selected_target_hexes_se = {}
		local selected_target_hexes_sw = {}
		local affected_array = {}

        wesnoth.interface.allow_end_turn(false)

        wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = "disabled"

        local unit_to_modify = wesnoth.units.find_on_map({id = unit_id})[1]

        local unit_to_modify_attacks = unit_to_modify.attacks_left
        local unit_to_modify_moves = unit_to_modify.moves
        local unit_to_modify_x = unit_to_modify.x
        local unit_to_modify_y = unit_to_modify.y

        unit_to_modify.attacks_left = 0
        unit_to_modify.moves = 0

        local function calculate_next_coords(x, y, direction)
            local new_x, new_y = x, y

        if direction == "ne" then
            if y % 2 == 1 and x % 2 == 0 then
                -- y непарний, x парний
                new_y = y
				new_x = x + 1
            elseif y % 2 == 1 and x % 2 == 1 then
                -- y непарний, x непарний
                new_y = y - 1
                new_x = x + 1
            elseif y % 2 == 0 and x % 2 == 0 then
                -- y парний, x парний
                new_y = y
                new_x = x + 1
            elseif y % 2 == 0 and x % 2 == 1 then
                -- y парний, x непарний
                new_y = y - 1
				new_x = x + 1
            end
		elseif direction == "nw" then
		    if y % 2 == 1 and x % 2 == 0 then
                -- y непарний, x парний
                new_y = y
				new_x = x - 1
            elseif y % 2 == 1 and x % 2 == 1 then
                -- y непарний, x непарний
                new_y = y - 1
                new_x = x - 1
            elseif y % 2 == 0 and x % 2 == 0 then
                -- y парний, x парний
                new_y = y
                new_x = x - 1
            elseif y % 2 == 0 and x % 2 == 1 then
                -- y парний, x непарний
                new_y = y - 1
				new_x = x - 1
            end
	    elseif direction == "n" then
                new_y = y - 1
				new_x = x
		elseif direction == "s" then
		        new_y = y + 1
				new_x = x
		elseif direction == "sw" then
		    if y % 2 == 1 and x % 2 == 0 then
                -- y непарний, x парний
                new_y = y + 1
				new_x = x - 1
            elseif y % 2 == 1 and x % 2 == 1 then
                -- y непарний, x непарний
                new_y = y
                new_x = x - 1
            elseif y % 2 == 0 and x % 2 == 0 then
                -- y парний, x парний
                new_y = y + 1
                new_x = x - 1
            elseif y % 2 == 0 and x % 2 == 1 then
                -- y парний, x непарний
                new_y = y
				new_x = x - 1
            end
	    elseif direction == "se" then
		    if y % 2 == 1 and x % 2 == 0 then
                -- y непарний, x парний
                new_y = y + 1
				new_x = x + 1
            elseif y % 2 == 1 and x % 2 == 1 then
                -- y непарний, x непарний
                new_y = y
                new_x = x + 1
            elseif y % 2 == 0 and x % 2 == 0 then
                -- y парний, x парний
                new_y = y + 1
                new_x = x + 1
            elseif y % 2 == 0 and x % 2 == 1 then
                -- y парний, x непарний
                new_y = y
				new_x = x + 1
            end
		end

            return new_x, new_y
        end

        local directions = {"n","s","ne","nw","sw","se"}

        for _, dir in ipairs(directions) do
            local target_x = unit_to_modify_x
            local target_y = unit_to_modify_y

            for step = 1, radius do
                target_x, target_y = calculate_next_coords(target_x, target_y, dir)

                local target_units = wesnoth.units.find_on_map({x = target_x, y = target_y})
                local has_unit = #target_units > 0

                if (not ignore_units or not has_unit) then
                    spell_place_image(target_x, target_y, image)
					if dir == "ne" then
					    table.insert(selected_target_hexes_ne, {x = target_x, y = target_y})
		            elseif dir == "nw" then
					    table.insert(selected_target_hexes_nw, {x = target_x, y = target_y})
	                elseif dir == "n" then
					    table.insert(selected_target_hexes_n, {x = target_x, y = target_y})
		            elseif dir == "s" then
				        table.insert(selected_target_hexes_s, {x = target_x, y = target_y})
		            elseif dir == "sw" then
					    table.insert(selected_target_hexes_sw, {x = target_x, y = target_y})
	                elseif dir == "se" then
					    table.insert(selected_target_hexes_se, {x = target_x, y = target_y})
		            end
                    table.insert(selected_target_hexes, {x = target_x, y = target_y, id = step, direction = dir})
                end
            end
        end

        function on_click_spell_event_rose(Table)
            for _, target_hex in ipairs(selected_target_hexes) do
                if Table.x == target_hex.x and Table.y == target_hex.y then
                    wml.variables["unit_to_cast_on_x"] = Table.x
                    wml.variables["unit_to_cast_on_y"] = Table.y
                    spell_remove_image(image)
                    wml.fire("redraw")
                    wesnoth.game_events.on_mouse_button = nil

                    wml.variables["distance_between_units"] = wesnoth.map.distance_between(unit_to_modify_x, unit_to_modify_y, Table.x, Table.y) * 72
					
					local animator = wesnoth.units.create_animator()
                    unit_to_modify.facing = wesnoth.map.get_relative_dir(unit_to_modify.x, unit_to_modify.y, Table.x, Table.y)
                    animator:add(  unit_to_modify, "attack", "hit", {range="ranged"}  )

                    animator:run()
                    animator:clear()
					
					for i = 1, target_hex.id do
					
					if target_hex.direction == "ne" then
					    if i == target_hex.id then
                            target_x, target_y = calculate_next_coords(selected_target_hexes_ne[i].x, selected_target_hexes_ne[i].y, target_hex.direction)
							table.insert(selected_target_hexes_ne, {x = target_x, y = target_y})
					    end
                        wml.variables["unit_to_cast_on_x"] = selected_target_hexes_ne[i].x
                        wml.variables["unit_to_cast_on_y"] = selected_target_hexes_ne[i].y
		            elseif target_hex.direction == "nw" then
					    if i == target_hex.id then
                            target_x, target_y = calculate_next_coords(selected_target_hexes_nw[i].x, selected_target_hexes_nw[i].y, target_hex.direction)
							table.insert(selected_target_hexes_nw, {x = target_x, y = target_y})
					    end
					    wml.variables["unit_to_cast_on_x"] = selected_target_hexes_nw[i].x
                        wml.variables["unit_to_cast_on_y"] = selected_target_hexes_nw[i].y
	                elseif target_hex.direction == "n" then
					    if i == target_hex.id then
                            target_x, target_y = calculate_next_coords(selected_target_hexes_n[i].x, selected_target_hexes_n[i].y, target_hex.direction)
							table.insert(selected_target_hexes_n, {x = target_x, y = target_y})
					    end
					    wml.variables["unit_to_cast_on_x"] = selected_target_hexes_n[i].x
                        wml.variables["unit_to_cast_on_y"] = selected_target_hexes_n[i].y
		            elseif target_hex.direction == "s" then
					    if i == target_hex.id then
                            target_x, target_y = calculate_next_coords(selected_target_hexes_s[i].x, selected_target_hexes_s[i].y, target_hex.direction)
							table.insert(selected_target_hexes_s, {x = target_x, y = target_y})
					    end
				        wml.variables["unit_to_cast_on_x"] = selected_target_hexes_s[i].x
                        wml.variables["unit_to_cast_on_y"] = selected_target_hexes_s[i].y
		            elseif target_hex.direction == "sw" then
					    if i == target_hex.id then
                            target_x, target_y = calculate_next_coords(selected_target_hexes_sw[i].x, selected_target_hexes_sw[i].y, target_hex.direction)
							table.insert(selected_target_hexes_sw, {x = target_x, y = target_y})
					    end
					    wml.variables["unit_to_cast_on_x"] = selected_target_hexes_sw[i].x
                        wml.variables["unit_to_cast_on_y"] = selected_target_hexes_sw[i].y
	                elseif target_hex.direction == "se" then
					    if i == target_hex.id then
                            target_x, target_y = calculate_next_coords(selected_target_hexes_se[i].x, selected_target_hexes_se[i].y, target_hex.direction)
							table.insert(selected_target_hexes_se, {x = target_x, y = target_y})
					    end
					    wml.variables["unit_to_cast_on_x"] = selected_target_hexes_se[i].x
                        wml.variables["unit_to_cast_on_y"] = selected_target_hexes_se[i].y
		            end
					
                    wesnoth.game_events.fire(event_spell)
					
					if event_spell == "skill_bend_air_cast" then 
					    local affected_unit = wesnoth.units.find_on_map{ x=wml.variables["unit_to_cast_on_x"], y=wml.variables["unit_to_cast_on_y"] }[1]
						if affected_unit then
						local animator = wesnoth.units.create_animator()
					    affected_unit.facing = wesnoth.map.get_relative_dir(affected_unit.x, affected_unit.y, unit_to_modify.x, unit_to_modify.y)
					    animator:run()
                        animator:clear()
						
						
					if target_hex.direction == "ne" then
                        affected_unit.x = selected_target_hexes_ne[i+1].x
						affected_unit.y = selected_target_hexes_ne[i+1].y
		            elseif target_hex.direction == "nw" then
					    affected_unit.x = selected_target_hexes_nw[i+1].x
						affected_unit.y = selected_target_hexes_nw[i+1].y
	                elseif target_hex.direction == "n" then
					    affected_unit.x = selected_target_hexes_n[i+1].x
						affected_unit.y = selected_target_hexes_n[i+1].y
		            elseif target_hex.direction == "s" then
				        affected_unit.x = selected_target_hexes_s[i+1].x
						affected_unit.y = selected_target_hexes_s[i+1].y
		            elseif target_hex.direction == "sw" then
					    affected_unit.x = selected_target_hexes_sw[i+1].x
						affected_unit.y = selected_target_hexes_sw[i+1].y
	                elseif target_hex.direction == "se" then
					    affected_unit.x = selected_target_hexes_se[i+1].x
						affected_unit.y = selected_target_hexes_se[i+1].y
		            end
					
					end
					
					end

					if event_spell == "skill_bend_lava_cast" then 
					
					local affected_unit = wesnoth.units.find_on_map{ x=wml.variables["unit_to_cast_on_x"], y=wml.variables["unit_to_cast_on_y"] }[1]		
					
					if affected_unit then
					table.insert(affected_array, affected_unit)
					local animator = wesnoth.units.create_animator()
					local damage = math.floor( 50 * ( 100 - affected_unit:resistance_against("fire", false, affected_unit.x, affected_unit.y) )/100 )
                    affected_unit.facing = wesnoth.map.get_relative_dir(affected_unit.x, affected_unit.y, unit_to_modify.x, unit_to_modify.y)
                    animator:add(  affected_unit, "defend", "hit", { with_bars=true, text=tostring(damage), color={255,0,0} }  )
                    affected_unit.hitpoints = affected_unit.hitpoints - damage
					animator:run()
                    animator:clear()

					end

					end				
				
					end
					
					local animator = wesnoth.units.create_animator()
                    for i,defender in ipairs(affected_array) do if (defender.hitpoints<=0) then
                        animator:add(  defender, "death", "hit", {}  )
                    end end
                    animator:run()
                    animator:clear()
                    
                    -- kill units
                    for i,defender in ipairs(affected_array) do if (defender.hitpoints<=0) then
                        wesnoth.game_events.fire("die", defender.loc, unit_to_modify.loc)
                        wesnoth.units.erase(defender)
                    end end
					
					wesnoth.game_events.fire(event_spell .. "_post")

                    unit_to_modify.attacks_left = unit_to_modify_attacks
                    unit_to_modify.moves = unit_to_modify_moves - 1

                    wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = nil

                    wesnoth.interface.allow_end_turn(true)

                    wesnoth.units.select()
                    return
                end
            end
            spell_remove_image(image)
            wml.fire("redraw")
            wesnoth.game_events.on_mouse_button = nil

            unit_to_modify.attacks_left = unit_to_modify_attacks
            unit_to_modify.moves = unit_to_modify_moves
            unit_to_modify.experience = unit_to_modify.experience + xp_cancel
            wesnoth.sides[unit_to_modify.side].gold = wesnoth.sides[unit_to_modify.side].gold + gold_cancel

            wml.variables["caster_" .. caster_id .. ".utils_spellcasting_allowed"] = nil
			wml.variables["caster_" .. caster_id .. ".spellcasted_this_turn"] = nil

            wesnoth.interface.allow_end_turn(true)

            wesnoth.units.select()
        end

        wesnoth.game_events.on_mouse_button = function(screen_x, screen_y, button, pressed)
            if pressed and button == "left" then
                --on_click_event(screen_x, screen_y)
				wesnoth.sync.invoke_command("on_click_spell_event", {type="_rose", x=screen_x, y=screen_y})
            end
        end
    end

    >>
[/lua]

#define CTL_ROSE_SPELL caster_id radius image ignore_units event_spell gold_cancel xp_cancel

    {VARIABLE rose_spell_radius {radius}}
    {VARIABLE rose_spell_caster_id {caster_id}}
    {VARIABLE rose_spell_image {image}}
    {VARIABLE rose_spell_ignore_units {ignore_units}}
    {VARIABLE rose_spell_event_spell {event_spell}}
    {VARIABLE rose_gold_cancel {gold_cancel}}
    {VARIABLE rose_xp_cancel {xp_cancel}}

    [lua]
            code= <<
		    rose_spell(wml.variables["rose_spell_caster_id"],
			wml.variables["rose_spell_radius"],
			wml.variables["rose_spell_image"],
			wml.variables["rose_spell_ignore_units"],
			wml.variables["rose_spell_event_spell"],
			wml.variables["rose_gold_cancel"],
			wml.variables["rose_xp_cancel"])

            wesnoth.interface.delay(300)
            wesnoth.units.select()
	        wesnoth.interface.deselect_hex()
            wml.fire("redraw")
		>>
    [/lua]
	
	{CLEAR_VARIABLE rose_spell_radius}
	{CLEAR_VARIABLE rose_spell_caster_id}
    {CLEAR_VARIABLE rose_spell_image}
    {CLEAR_VARIABLE rose_spell_ignore_units}
    {CLEAR_VARIABLE rose_spell_event_spell}
    {CLEAR_VARIABLE rose_gold_cancel}
    {CLEAR_VARIABLE rose_xp_cancel}

#enddef